"use client";
import * as React from "react";
import { AudioRecorder } from "react-audio-voice-recorder";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  Mic,
  Play,
  Pause,
  Volume2,
  VolumeX,
  Trophy,
  Plus,
  Crown,
} from "lucide-react";
import { ScrollArea } from "@/components/ui/scroll-area";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Dialog,
  DialogClose,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogOverlay,
  DialogPortal,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";

function cosineDistance(vec1: number[], vec2: number[]): number {
  if (vec1.length !== vec2.length) {
    console.log(vec1, vec2.length);
    throw new Error("Vectors must have the same length.");
  }

  const dotProduct = vec1.reduce((sum, v, i) => sum + v * vec2[i], 0);
  const magnitude1 = Math.sqrt(vec1.reduce((sum, v) => sum + v * v, 0));
  const magnitude2 = Math.sqrt(vec2.reduce((sum, v) => sum + v * v, 0));

  if (magnitude1 === 0 || magnitude2 === 0) {
    throw new Error("Vectors must not be zero vectors.");
  }

  const cosineSimilarity = dotProduct / (magnitude1 * magnitude2);

  return cosineSimilarity; // Cosine distance = 1 - Cosine similarity
}

export default function App() {
  const uploadAudio = (blob: any) => {
    setIsRecordingDone(true);
    console.log("starting upload");
    const formData = new FormData();
    formData.append("file", blob, "file.webm");

    const xhr = new XMLHttpRequest();
    xhr.open("POST", "https://api.mortada.dev", true);

    xhr.onload = function () {
      if (xhr.status === 200) {
        console.log("Upload successful:", xhr.responseText);
        setCurrentRecording(blob);
        setCurrentVector(JSON.parse(xhr.responseText).embedding);
      } else {
        console.error("Upload failed:", xhr.status, xhr.statusText);
      }
    };

    xhr.onerror = function () {
      console.error("Request failed");
    };

    xhr.send(formData);
  };

  function onGameStart() {
    setPlayers([
      {
        name: "Owner",
        score: 0,
        mp3File: null,
        voiceVector: null,
      }
    ]);
    // setTargetPlayer(players[Math.floor(Math.random() * players.length)]);
    setSelectedCharacter(characters[0]);
  }

  function incrementCurrentImitator() {
    setIsRecordingDone(false)
    players[currentImitatorIndex].score = cosineDistance(currentVector, selectedCharacter.vector)
    setAttempts([...attempts, {
      attempter: players[currentImitatorIndex],
      attemptMp3: currentRecording,
      attemptVector: currentVector,
    }]) // previous 
    if (currentImitatorIndex + 1 < players.length) {
      setCurrentImitatorIndex(currentImitatorIndex + 1)
    } else {
      setTimeout(roundEnd, 1000)
    }
  }

  const [currentVector, setCurrentVector] = React.useState<any>();
  const [currentRecording, setCurrentRecording] = React.useState<any>();
  const [players, setPlayers] = React.useState<any[]>([]);
  const [currentImitatorIndex, setCurrentImitatorIndex] =
    React.useState<any>(0);
  const [isRecordingDone, setIsRecordingDone] = React.useState(false);
  const audioRef = React.useRef<HTMLAudioElement | null>(null);

  const [attempts, setAttempts] = React.useState<any>([
  ]);

  const [inputValue, setInputValue] = React.useState("");

  const onChangeHandler = (event: {
    target: { value: React.SetStateAction<string> };
  }) => {
    setInputValue(event.target.value);
  };

  // Round ends- compare attemptVectors from attempts[] array with voiceVector from targetPlayer
  // Rank the comparisons by similarity and award the highest similarity by adding a win to that player object
  // Clear attempts array and shift targetPlayer to the next player in array

  const addAudioElement = (blob: Blob) => {
    const url = URL.createObjectURL(blob);
    const audio = document.createElement("audio");
    audio.src = url;
    audio.controls = true;
    document.body.appendChild(audio);
  };
  const [isPlaying, setIsPlaying] = React.useState(false);
  const [isMuted, setIsMuted] = React.useState(false);
  const [selectedCharacter, setSelectedCharacter] = React.useState<
    any
  >({
    id: "1",
    name: "Samuel",
    avatar: "/placeholder.svg?height=80&width=80",
    mp3: "https://hc-cdn.hel1.your-objectstorage.com/s/v3/cce5f0a33fe859e83cbf2fa0dbd976b0ba096d1a_samuel_f_audio.mp4",
  });

  const characters = [
    {
      id: "1",
      name: "Samuel",
      avatar: "/placeholder.svg?height=80&width=80",
      mp3: "https://hc-cdn.hel1.your-objectstorage.com/s/v3/cce5f0a33fe859e83cbf2fa0dbd976b0ba096d1a_samuel_f_audio.mp4",
      vector: [0.0, 0.12841428816318512, 0.001888155355118215, 0.0, 0.0651078149676323, 0.027497505769133568, 0.0764918103814125, 0.11805807799100876, 0.0, 0.0, 0.10779809206724167, 0.02772744745016098, 0.0, 0.0, 0.015740837901830673, 0.0, 0.2158653885126114, 0.12243533879518509, 0.014990480616688728, 0.0009777728701010346, 0.0, 0.10115014761686325, 0.0, 0.0, 0.0, 0.054719094187021255, 0.0, 0.01418962050229311, 0.0, 0.0, 0.2001156359910965, 0.07989837974309921, 0.0, 0.007258412893861532, 0.003409565659239888, 0.060246098786592484, 0.05642731115221977, 0.08135197311639786, 0.002046696376055479, 0.04517468437552452, 0.0, 0.0, 0.032753217965364456, 0.0623013935983181, 0.05879494920372963, 0.0, 0.050399549305438995, 0.015347794629633427, 0.005785373505204916, 0.004442111123353243, 0.0, 0.012062599882483482, 0.0, 0.0, 0.06655090302228928, 0.03521495312452316, 0.0018455779645591974, 0.001252057496458292, 0.0, 0.015582769177854061, 0.021074073389172554, 0.0, 0.0010323241585865617, 0.04719977453351021, 0.12288159132003784, 0.0, 0.12412930279970169, 0.056350842118263245, 0.0, 0.019380813464522362, 0.06457722932100296, 0.06487999111413956, 0.0, 0.13585999608039856, 0.006401717197149992, 0.0025087075773626566, 0.0, 0.07139533013105392, 0.0028174296021461487, 0.0009294481133110821, 0.025917991995811462, 0.0, 0.14618222415447235, 0.00011564865417312831, 0.0, 0.0, 0.017291396856307983, 0.010679789818823338, 0.01926790177822113, 0.07238403707742691, 0.016284283250570297, 0.00282503804191947, 0.0, 0.0, 0.002252852777019143, 0.0, 0.024235079064965248, 0.0, 0.0, 0.0, 0.08861816674470901, 0.0, 0.06316948682069778, 0.08067421615123749, 0.007734984625130892, 0.08437101542949677, 0.04805903509259224, 0.01794855296611786, 0.04280063137412071, 0.2552125155925751, 0.0, 0.010860903188586235, 0.0, 0.18062077462673187, 0.01426779292523861, 0.0, 0.0, 0.014638380147516727, 0.0, 0.0, 0.10262956470251083, 0.01719629392027855, 0.0608442984521389, 0.015138019807636738, 0.04875553026795387, 0.08063429594039917, 0.036187801510095596, 0.08179868757724762, 0.1316259503364563, 0.0, 0.00020819537166971713, 0.0013644344871863723, 0.20159783959388733, 0.11123745143413544, 0.05281028524041176, 0.09782960265874863, 0.0012422169093042612, 0.007090480998158455, 0.0459153987467289, 0.01012360118329525, 0.017339957877993584, 0.04488607123494148, 0.047984980046749115, 0.0048194769769907, 0.04783056303858757, 0.0, 0.11313584446907043, 0.0, 0.08821416646242142, 0.017802003771066666, 0.03348850458860397, 0.028125079348683357, 0.0012815764639526606, 0.004138777498155832, 0.0030697928741574287, 0.19013968110084534, 0.0, 0.0, 0.043680161237716675, 0.002606427064165473, 0.0, 0.0, 0.006935552693903446, 0.00468739029020071, 0.23030784726142883, 0.01875138469040394, 0.07677676528692245, 0.05044909939169884, 0.10607363283634186, 0.04864804819226265, 0.005880098324269056, 0.0, 0.0, 0.01736694574356079, 0.0, 4.5679989852942526e-05, 0.012757065705955029, 0.002106174360960722, 0.0007570132147520781, 0.0379752516746521, 0.08148614317178726, 0.06320187449455261, 0.027836482971906662, 0.006469963118433952, 0.05488031730055809, 0.0, 0.0, 0.0013281472492963076, 0.0035849150735884905, 0.006154919508844614, 0.020574821159243584, 0.020927583798766136, 0.0, 0.1992061287164688, 0.0, 0.005865669809281826, 0.15717199444770813, 0.2010597139596939, 0.0019038538448512554, 0.24876604974269867, 0.0, 0.048747263848781586, 0.05449280887842178, 0.08186259865760803, 0.0, 0.0, 0.0018452664371579885, 0.09217938780784607, 0.039994947612285614, 0.0, 0.0, 0.00033311048173345625, 0.025481024757027626, 0.15384648740291595, 0.09096677601337433, 0.0, 0.0, 0.04757639020681381, 0.04682043567299843, 0.0, 0.05109674483537674, 0.016473207622766495, 0.003105828072875738, 0.0, 0.06443090736865997, 0.013150829821825027, 0.010091600008308887, 0.0029149085748940706, 0.0, 0.0, 0.019219154492020607, 0.0, 0.011921907775104046, 0.0, 0.0, 0.018716532737016678, 0.04219482094049454, 0.0385490357875824, 0.09087245911359787, 0.11183316260576248, 0.07731275260448456, 0.0, 0.09717255085706711, 0.008094429969787598, 0.0, 0.03693937137722969, 0.03731570392847061, 0.0, 0.07595077157020569, 0.003024845151230693, 0.0576048381626606, 0.04604611173272133, 0.0034571525175124407, 0.0, 0.013433696702122688, 0.023379702121019363]
    },
    { id: "2", name: "Deven", avatar: "/placeholder.svg?height=80&width=80", mp3: "https://hc-cdn.hel1.your-objectstorage.com/s/v3/44c6e2661c681c2d90df971f40ffd10049a796db_dev_audio.mp4", vector: [
    0.0,
    0.008391046896576881,
    0.0,
    0.0,
    0.0315091498196125,
    0.05977122113108635,
    0.01395539939403534,
    0.00552276149392128,
    0.0008659746963530779,
    0.023007119074463844,
    0.047400377690792084,
    0.03063974902033806,
    0.015775328502058983,
    0.0,
    0.019918939098715782,
    0.07048187404870987,
    0.061664510518312454,
    0.07449955493211746,
    0.0029417958576232195,
    0.0,
    0.0,
    0.04788888245820999,
    0.03488822653889656,
    0.0,
    0.0,
    0.0017712173284962773,
    0.0,
    0.019709177315235138,
    0.09121556580066681,
    0.0,
    0.11066743731498718,
    0.07922473549842834,
    0.0054450081661343575,
    0.014012305997312069,
    0.0,
    0.12127259373664856,
    0.09369368851184845,
    0.03462972119450569,
    0.0,
    0.013848536647856236,
    0.0,
    0.013065281324088573,
    0.118243508040905,
    0.08186346292495728,
    0.1198011189699173,
    0.0007382116746157408,
    0.06220599263906479,
    0.06660284847021103,
    0.0,
    0.0,
    0.0,
    0.10733804106712341,
    0.0,
    0.0,
    0.01569802314043045,
    0.005974751431494951,
    0.0,
    0.002352069364860654,
    0.0,
    0.0,
    0.05141568183898926,
    0.0,
    0.0,
    0.013528607785701752,
    0.046242620795965195,
    0.02920852228999138,
    0.07673195004463196,
    0.031467750668525696,
    0.0,
    0.0,
    0.0,
    0.05947481095790863,
    0.0,
    0.08332762122154236,
    0.030617089942097664,
    0.08670560270547867,
    0.0,
    0.010384894907474518,
    0.004029293078929186,
    0.07852072268724442,
    0.0,
    0.0,
    0.12101685255765915,
    0.10220202058553696,
    0.0,
    0.0,
    0.0,
    0.011902897618710995,
    0.03969433531165123,
    0.05853243172168732,
    0.0946119874715805,
    0.0,
    0.039627790451049805,
    0.0,
    0.06776474416255951,
    0.0,
    0.10002794861793518,
    0.0,
    0.025281593203544617,
    0.0,
    0.024651015177369118,
    0.0,
    0.06058121845126152,
    0.0,
    0.03682272881269455,
    0.07400131225585938,
    0.13634490966796875,
    0.026916762813925743,
    0.0,
    0.18810652196407318,
    0.0,
    0.06377056986093521,
    0.0,
    0.1702028512954712,
    0.0,
    0.0,
    0.10147148370742798,
    0.007782237604260445,
    0.00877634808421135,
    0.006149915978312492,
    0.07658488303422928,
    0.10991838574409485,
    0.08856353908777237,
    0.027804899960756302,
    0.03432963788509369,
    0.1575261801481247,
    0.046093206852674484,
    0.1768823266029358,
    0.18572692573070526,
    0.0,
    0.020067453384399414,
    0.0,
    0.009208617731928825,
    0.042235586792230606,
    0.07507836073637009,
    0.05989815667271614,
    0.11062159389257431,
    0.20761141180992126,
    0.02354203164577484,
    0.03240293264389038,
    0.0,
    0.09878543019294739,
    0.014167490415275097,
    0.028929144144058228,
    0.12095025926828384,
    0.00226194248534739,
    0.08585318177938461,
    0.0,
    0.08410854637622833,
    0.06711786985397339,
    0.04993251711130142,
    0.1285339742898941,
    0.006630004849284887,
    0.009527862071990967,
    0.014359408989548683,
    0.12737029790878296,
    0.0,
    0.0,
    0.10137148201465607,
    0.05306699499487877,
    0.0,
    0.0,
    0.15441428124904633,
    0.18184413015842438,
    0.01744065247476101,
    0.10837265104055405,
    0.002511260798200965,
    0.029238229617476463,
    0.11378403753042221,
    0.054606176912784576,
    0.0,
    0.002125978469848633,
    0.0,
    0.07018178701400757,
    0.009051699191331863,
    0.05331422761082649,
    0.05257872864603996,
    0.07974720746278763,
    0.0052705323323607445,
    0.07632645964622498,
    0.10815070569515228,
    0.10700723528862,
    0.0070365783758461475,
    0.028750848025083542,
    0.05041802302002907,
    0.0,
    0.0,
    0.0077351457439363,
    0.12201356887817383,
    0.0815085917711258,
    0.0880766212940216,
    0.014468423090875149,
    0.0,
    0.06995052844285965,
    0.0,
    0.0940147191286087,
    0.05924195423722267,
    0.005922224372625351,
    0.019935233518481255,
    0.13485385477542877,
    0.0,
    0.11155600845813751,
    0.0024364558048546314,
    0.046491920948028564,
    0.0,
    0.010591770522296429,
    0.05149524658918381,
    0.012443065643310547,
    0.07622838020324707,
    0.0,
    0.0,
    0.0,
    0.12578965723514557,
    0.083767369389534,
    0.02100815251469612,
    0.0,
    0.0,
    0.06757235527038574,
    0.17415225505828857,
    0.0,
    0.11326954513788223,
    0.07642044872045517,
    0.0,
    0.0,
    0.027983171865344048,
    0.006122648250311613,
    0.0,
    0.026816384866833687,
    0.0,
    0.0,
    0.0,
    0.0,
    0.04352971911430359,
    0.0,
    0.041810788214206696,
    0.11842073500156403,
    0.04978056624531746,
    0.020190782845020294,
    0.06967741250991821,
    0.022320695221424103,
    0.15192759037017822,
    0.09449486434459686,
    0.004112833645194769,
    0.03706362098455429,
    0.0,
    0.014681692235171795,
    0.004243112169206142,
    0.0,
    0.07686905562877655,
    0.044884540140628815,
    0.0046143182553350925,
    0.07798805087804794,
    0.0,
    0.06297746300697327,
    0.016352668404579163,
    0.001220392994582653
  ] },
    { id: "3", name: "Kermit", avatar: "/placeholder.svg?height=80&width=80", mp3: "https://hc-cdn.hel1.your-objectstorage.com/s/v3/09d5ff39fd7db3acedd29bd6486cb2dcc701f185_kermit_audio.mp4", vector: [
    0.11924732476472855,
    0.0,
    0.09954400360584259,
    0.0,
    0.09690693020820618,
    0.006156229414045811,
    0.015980208292603493,
    0.012951228767633438,
    0.0,
    0.027692066505551338,
    0.08754502236843109,
    0.07092621177434921,
    0.0063232239335775375,
    0.0,
    0.03650893643498421,
    0.0,
    0.11614853143692017,
    0.07193975895643234,
    0.01546570099890232,
    0.03593779727816582,
    0.07410126179456711,
    0.04589202627539635,
    0.0,
    0.0,
    0.0,
    0.07137327641248703,
    0.00989163015037775,
    0.05935526639223099,
    0.0,
    0.0,
    0.057923898100852966,
    0.06277231872081757,
    0.0,
    0.0,
    0.1112818643450737,
    0.057251766324043274,
    0.0,
    0.013268768787384033,
    0.07154089212417603,
    0.11108643561601639,
    0.0,
    0.02767101861536503,
    0.02569533698260784,
    0.1180037260055542,
    0.07300706207752228,
    0.0,
    0.031787972897291183,
    0.043436914682388306,
    0.011226940900087357,
    0.0,
    0.0,
    0.0712142214179039,
    0.0,
    0.0,
    0.01751025952398777,
    0.0024082192685455084,
    0.028947656974196434,
    0.0,
    0.034532397985458374,
    0.0,
    0.0,
    0.0,
    0.015793295577168465,
    0.016749758273363113,
    0.0012837627436965704,
    0.0,
    0.10502007603645325,
    0.007491555064916611,
    0.0,
    0.0,
    0.20415621995925903,
    0.03960803523659706,
    0.0,
    0.09061107784509659,
    0.0,
    0.017174335196614265,
    0.0,
    0.013317523524165154,
    0.10609181225299835,
    0.10323375463485718,
    0.0,
    0.0,
    0.1764020025730133,
    0.022387294098734856,
    0.0,
    0.0012745825806632638,
    0.01362164132297039,
    0.01821819879114628,
    0.0,
    0.08002781122922897,
    0.0511421374976635,
    0.0,
    0.0,
    0.0,
    0.08209355175495148,
    0.0,
    0.04971204325556755,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.17770449817180634,
    0.10106959193944931,
    0.08516644686460495,
    0.04010305553674698,
    0.03065914660692215,
    0.044539108872413635,
    0.002791834995150566,
    0.18523544073104858,
    0.0,
    0.0056579215452075005,
    0.0,
    0.027934089303016663,
    0.01339082419872284,
    0.0,
    0.05628668889403343,
    0.04401388764381409,
    0.09830524772405624,
    0.05383482575416565,
    0.08493491262197495,
    0.08178146928548813,
    0.06136684492230415,
    0.0288259144872427,
    0.024830441921949387,
    0.1886882781982422,
    0.004004351794719696,
    0.22496232390403748,
    0.006970913615077734,
    0.0,
    0.004521541763097048,
    0.0,
    0.05497691407799721,
    0.10876579582691193,
    0.08570700138807297,
    0.08206913620233536,
    0.05401110649108887,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.023553404957056046,
    0.0,
    0.001464647357352078,
    0.0,
    0.06437863409519196,
    0.0,
    0.12014229595661163,
    0.0,
    0.1075698658823967,
    0.04863067716360092,
    0.0,
    0.01520104706287384,
    0.0,
    0.1313069462776184,
    0.0,
    0.0,
    0.06481815129518509,
    0.0,
    0.17699597775936127,
    0.0,
    0.10802854597568512,
    0.07517533749341965,
    0.026799866929650307,
    0.04098117724061012,
    0.02476796880364418,
    0.037011463195085526,
    0.013977332040667534,
    0.08029090613126755,
    0.0,
    0.0,
    0.005866347812116146,
    0.03796568885445595,
    0.0,
    0.022441441193223,
    0.07841909676790237,
    0.10233115404844284,
    0.0,
    0.15268129110336304,
    0.06478042900562286,
    0.04365106299519539,
    0.011499603278934956,
    0.0862283781170845,
    0.01872830092906952,
    0.0,
    0.0,
    0.0704803317785263,
    0.0,
    0.0,
    0.019449522718787193,
    0.06528615206480026,
    0.0,
    0.14357313513755798,
    0.0,
    0.0,
    0.034511957317590714,
    0.03445203974843025,
    0.0,
    0.26332297921180725,
    0.09167183935642242,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.006985126994550228,
    0.04129377007484436,
    0.0520143061876297,
    0.044560760259628296,
    0.0,
    0.0,
    0.14827251434326172,
    0.007385725621134043,
    0.0,
    0.0,
    0.0,
    0.0038823294453322887,
    0.16154341399669647,
    0.0,
    0.041197311133146286,
    0.09770125150680542,
    1.3792019672109745e-05,
    0.0,
    0.09618832170963287,
    0.04631969705224037,
    0.0,
    0.022781945765018463,
    0.0,
    0.0,
    0.005192789249122143,
    0.0,
    0.05352700129151344,
    0.0,
    0.0,
    0.1134931817650795,
    0.06981763988733292,
    0.0,
    0.008275317959487438,
    0.11033105850219727,
    0.0030523627065122128,
    0.0284949392080307,
    0.053081247955560684,
    0.21940529346466064,
    0.0,
    0.055394694209098816,
    0.018376080319285393,
    0.0,
    0.10072165727615356,
    0.04792993515729904,
    0.0,
    0.0497632697224617,
    0.0,
    0.0,
    0.043325670063495636,
    0.0
  ] },
    { id: "4", name: "Danny Devito", avatar: "/placeholder.svg?height=80&width=80", mp3: "https://hc-cdn.hel1.your-objectstorage.com/s/v3/bd674f00dd076f0675e7ba42e03f32e31da13919_dannydevito_audio.mp4", vector: [
    0.0,
    0.0636085644364357,
    0.0010325200855731964,
    0.0,
    0.10796456784009933,
    0.004394186660647392,
    0.04739650711417198,
    0.02035767398774624,
    0.0,
    0.0,
    0.14844100177288055,
    0.087802954018116,
    0.0039846329018473625,
    0.0,
    0.016422679647803307,
    0.0,
    0.10631038248538971,
    0.023081952705979347,
    0.005769017618149519,
    0.01667155884206295,
    0.0,
    0.04344707354903221,
    0.03327999264001846,
    0.0,
    0.0,
    0.07220125198364258,
    0.0,
    0.09695127606391907,
    0.007888087071478367,
    0.0,
    0.11665169149637222,
    0.0,
    0.0,
    0.026284288614988327,
    0.017720382660627365,
    0.0815281793475151,
    0.022889038547873497,
    0.05189710855484009,
    0.0013115220936015248,
    0.07692079991102219,
    0.0,
    0.0,
    0.07764514535665512,
    0.02148866280913353,
    0.00043511722469702363,
    0.0,
    0.08040227741003036,
    0.018701212480664253,
    0.06143410876393318,
    0.0,
    0.0,
    0.06113690882921219,
    0.014929812401533127,
    0.0,
    0.02919590100646019,
    0.048673342913389206,
    0.0011842409148812294,
    0.0,
    0.0,
    0.029638899490237236,
    0.0,
    0.0,
    0.0002519074478186667,
    0.032816868275403976,
    0.08376602083444595,
    0.0,
    0.16094191372394562,
    0.09910628199577332,
    0.0,
    0.002739629475399852,
    0.1029093936085701,
    0.05139528587460518,
    0.00044031668221578,
    0.1747986078262329,
    0.0023267539218068123,
    0.03931577131152153,
    0.0,
    0.09857513755559921,
    0.0,
    0.017526982352137566,
    0.0,
    0.0,
    0.24893708527088165,
    0.020098581910133362,
    0.0,
    0.0,
    0.0034600370563566685,
    0.01395891048014164,
    0.02983936481177807,
    0.006333006080240011,
    0.10351564735174179,
    0.0,
    0.0011009727604687214,
    0.0,
    0.007170983124524355,
    0.0,
    0.009610547684133053,
    0.0,
    0.01794721558690071,
    0.0,
    0.11283102631568909,
    0.0,
    0.15187852084636688,
    0.0737803652882576,
    0.03191877529025078,
    0.05426856502890587,
    0.13968130946159363,
    0.02225029654800892,
    0.006498957984149456,
    0.17977210879325867,
    0.0002790188300423324,
    0.016384294256567955,
    0.0,
    0.1162099540233612,
    0.0358278788626194,
    0.0,
    0.0019806516356766224,
    0.014067770913243294,
    0.0072324094362556934,
    0.0,
    0.06728862971067429,
    0.010752080008387566,
    0.10710758715867996,
    0.020223325118422508,
    0.08859560638666153,
    0.14517876505851746,
    0.10544439405202866,
    0.16482210159301758,
    0.0006826769094914198,
    0.0,
    0.0,
    0.0,
    0.09626483172178268,
    0.11469816416501999,
    0.048267561942338943,
    0.13691172003746033,
    0.009441208094358444,
    0.021862385794520378,
    0.10003285855054855,
    0.0476662814617157,
    0.005067269783467054,
    0.024829814210534096,
    0.007102081552147865,
    0.0742798000574112,
    0.003574883798137307,
    0.0,
    0.048039279878139496,
    0.0,
    0.16971147060394287,
    0.047453295439481735,
    0.16568641364574432,
    0.08736005425453186,
    0.0,
    0.0004913011798635125,
    0.0015705986879765987,
    0.07811841368675232,
    0.0,
    0.0,
    0.012833522632718086,
    0.01826556771993637,
    0.009799770079553127,
    0.0,
    0.041567977517843246,
    0.04570883512496948,
    0.09020400047302246,
    0.09707196801900864,
    0.07706130295991898,
    0.04674769937992096,
    0.03727342188358307,
    0.10261086374521255,
    0.002403073012828827,
    0.0,
    0.0,
    0.001985306618735194,
    0.0,
    0.05394488945603371,
    0.02560606226325035,
    0.012599372304975986,
    0.01069506537169218,
    0.029118474572896957,
    0.04536797106266022,
    0.08349611610174179,
    0.0,
    0.012715142220258713,
    0.039048001170158386,
    0.0,
    0.0,
    0.11140310019254684,
    0.0,
    0.006039910949766636,
    0.06765780597925186,
    0.13221776485443115,
    0.0,
    0.0754544585943222,
    0.0,
    0.0,
    0.036889635026454926,
    0.11788906902074814,
    0.057657890021800995,
    0.11408510059118271,
    0.0027292328886687756,
    0.08643245697021484,
    0.006675254087895155,
    0.05848408117890358,
    0.0,
    0.0,
    0.0,
    0.049607403576374054,
    0.019522331655025482,
    0.0,
    0.0012078898726031184,
    0.0,
    0.035593729466199875,
    0.01826661080121994,
    0.1718336045742035,
    0.0,
    0.0,
    0.0062163942493498325,
    0.12874174118041992,
    0.0,
    0.021579286083579063,
    0.15578171610832214,
    0.002343697240576148,
    0.0,
    0.011670899577438831,
    0.0039964523166418076,
    0.015505969524383545,
    0.0,
    0.0,
    0.0012098746374249458,
    0.0012637259205803275,
    0.0,
    0.01349229458719492,
    0.0,
    0.0,
    0.06254976987838745,
    0.16514740884304047,
    0.09445740282535553,
    0.09206168353557587,
    0.15951626002788544,
    0.0426102951169014,
    0.07795435190200806,
    0.06772676855325699,
    0.002085496671497822,
    0.0,
    0.06563016027212143,
    0.17946839332580566,
    0.001846504514105618,
    0.08140623569488525,
    0.0018718676874414086,
    0.040701914578676224,
    0.10309728980064392,
    0.0008969679474830627,
    0.008818655274808407,
    0.020805297419428825,
    0.009528062306344509
  ] }
  ];


  const togglePlay = () => setIsPlaying(!isPlaying);
  const toggleMute = () => setIsMuted(!isMuted);


  function roundEnd() {
    setAttempts([])
  }

  React.useEffect(() => {
    onGameStart();
  }
    , []);

  return (
    <div className="min-h-svh bg-black text-white">
      <div className="container mx-auto px-4 py-8">
        {/* Game Title */}
        <div className="mb-8 text-center">
          <h1 className="text-4xl md:text-5xl font-bold bg-gradient-to-r from-purple-500 to-pink-500 bg-clip-text text-transparent">
            The Impersonator
          </h1>
          <p className="text-gray-400 mt-2">
            Master the art of voice impersonation
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          {/* Main Game Area */}
          <div className="lg:col-span-2 space-y-6">
            {/* Video Player */}
            <div className="flex flex-col items-center gap-4">
              <audio
                key={selectedCharacter}
                ref={audioRef}
                controls
                src={selectedCharacter.mp3}>
                Your browser does not support the
                <code>audio</code> element.
              </audio>
            </div>


            {/* Character Selection */}
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader>
                <CardTitle className="text-xl">
                  Choose a Person to Impersonate
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-6 gap-4">
                  {characters.map((character) => (
                    <div
                      key={character.id}
                      className={`flex flex-col items-center gap-2 cursor-pointer transition-all p-2 rounded-lg ${selectedCharacter.name === character.name
                          ? "bg-purple-900/50 ring-2 ring-purple-500"
                          : "hover:bg-gray-800"
                        }`}
                      onClick={() => {
                        setSelectedCharacter(character)
                        console.log(character.name)
                      }

                      }
                    >
                      <Avatar className="h-16 w-16">
                        <AvatarImage
                          src={"https://github.com/shadcn.png"}
                          alt={character.name}
                        />
                        <AvatarFallback>
                          {character.name.substring(0, 2)}
                        </AvatarFallback>
                      </Avatar>
                      <span className="text-sm text-center">
                        {character.name}
                      </span>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>

            {/* <h1>{players[currentImitatorIndex].name}, imitate {targetPlayer.name}</h1> */}
            <div className="flex flex-col items-center gap-4 py-6">
              <div className="flex items-center gap-3">
                {players.map((i, index) => (
                  <div className="flex flex-col items-center gap-2">
                    {/* {index == currentImitatorIndex ? "Hi" : <></>} */}
                    <Avatar
                      key={i}
                      className={`h-16 w-16 border-2 ${i.name === players[currentImitatorIndex].name ? "border-purple-500 border-4" : null}`}
                    >
                      <AvatarImage
                        src="https://github.com/shadcn.png"
                        alt="Character"
                      />
                      <AvatarFallback>CH</AvatarFallback>
                    </Avatar>
                    <Label>{i.name}</Label>
                  </div>
                ))}
                <Dialog>
                  <DialogTrigger asChild>
                    <Button
                      size="icon"
                      variant="outline"
                      className="h-16 w-16 rounded-full border-dashed mb-5"
                    >
                      <Plus className="h-6 w-6" />
                    </Button>
                  </DialogTrigger>
                  <DialogContent className="sm:max-w-[425px] bg-[#101828] rounded-2xl">
                    <DialogHeader>
                      <DialogTitle className="text-white">Add User</DialogTitle>
                      <DialogDescription className="text-white">
                        Add a user to the game!
                      </DialogDescription>
                    </DialogHeader>
                    <div className="grid gap-4 py-4">
                      <Input
                        className="text-white rounded-2xl"
                        type="text"
                        placeholder="Username"
                        onChange={onChangeHandler}
                        value={inputValue}
                      />
                      <DialogClose asChild>
                        <Button
                          className="text-white bg-purple-500 hover:bg-purple-600"
                          onClick={() => {
                            let newPlayer = {
                              score: 0,
                              name: inputValue,
                              mp3File: currentRecording,
                              voiceVector: currentVector,
                              previousPlayer: false,
                            };
                            setPlayers([...players, newPlayer]);

                            console.log(newPlayer);
                          }}
                        >
                          Add user
                        </Button>
                      </DialogClose>
                    </div>
                  </DialogContent>
                </Dialog>
              </div>
              <div className="flex flex-row items-center gap-3">
                {!isRecordingDone ?
                  <AudioRecorder
                    onRecordingComplete={uploadAudio}
                    audioTrackConstraints={{
                      noiseSuppression: true,
                      echoCancellation: true,
                    }}
                    downloadOnSavePress={false}
                    downloadFileExtension="mp3"
                    showVisualizer={true}
                    classes={{ AudioRecorderClass: "scale-130 mt-5 mb-5 ml-5" }}
                  />
                  :
                  <Button className="ml-5" onClick={incrementCurrentImitator}>{(currentImitatorIndex == players.length - 1) ? "End Game" : "Next Player"}</Button>
                }
              </div>
            </div>
          </div>

          {/* Leaderboard */}
          <div className="lg:col-span-1">
            <Card className="bg-gray-900 border-gray-800">
              <CardHeader className="pb-2">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-xl flex items-center gap-2">
                    <Trophy className="h-5 w-5 text-yellow-500" />
                    Leaderboard
                  </CardTitle>
                </div>
              </CardHeader>
              <CardContent>
                <ScrollArea className="h-[400px] pr-4">
                  <Table>
                    <TableHeader>
                      <TableRow className="border-gray-800">
                        <TableHead className="w-12">Rank</TableHead>
                        <TableHead>Player</TableHead>
                        <TableHead className="text-right">Score</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      {players.map((entry: any, i: any) => (
                        <TableRow
                          key={entry.name}
                          className="border-gray-800"
                        >
                          <TableCell className="font-medium">
                            {i === 0 ? (
                              <span className="flex items-center justify-center h-6 w-6 rounded-full bg-yellow-500/20 text-yellow-500">
                                <Crown className="h-3 w-3" />
                              </span>
                            ) : (
                              i
                            )}
                          </TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              <Avatar className="h-6 w-6">
                                <AvatarImage
                                  src={entry.avatar}
                                  alt={entry.name}
                                />
                                <AvatarFallback>
                                  {entry.name.substring(0, 2)}
                                </AvatarFallback>
                              </Avatar>
                              <span>{entry.name}</span>
                            </div>
                          </TableCell>
                          <TableCell className="text-right">
                            {entry.score * 1000}
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                </ScrollArea>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
